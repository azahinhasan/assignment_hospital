{"version":3,"sources":["logo.svg","components/Question1.js","components/Question2.js","components/Question3.js","App.js","reportWebVitals.js","index.js"],"names":["Question1","props","useState","count","setCount","useEffect","patientsDataSorted","map","data","isAdmitted","countNotAdmitted","className","patientID","lastName","firstName","style","cursor","color","onClick","admittePatient","kidneyNeeded","undefined","diseases","find","e","length","Question2","doctorID","teamID","doctorType","email","active","doctorRequests","doctors","setDoctors","teamName","consultantInCharge","teamMates","doctorsDataSorted","sort","a","b","addMsg","setAddMsg","fastName","setFastName","setLastname","docReqs","setDocReqs","addNewDoc","localStorage","getItem","newID","rand","Math","random","floor","uniqueID","Email","slice","concat","updateUser","d","console","log","push","filterDoc","filter","setItem","onChange","target","value","Question3","patients","setPatients","showMsg","setShowMsg","addNewPatientFromOtherHospital","p","deleteData","App","pageDataOf","setPageDataOf","SetkidneyNeeded","countKendyPatient","addNewPatientFromOtherHospitalHandler","pageData","id","newData","el","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d37a5d44.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\nimport '../App.css';\r\nimport React,{useState,useEffect} from 'react';\r\n\r\nconst Question1=(props)=> {\r\n\r\n\r\n    const [count, setCount]=useState(0);\r\n\r\n    const countNotAdmitted=()=>{\r\n        let count = 0;\r\n        \r\n        //  data.diseases.find(e=>e=='1-kidney')!=undefined?\r\n    \r\n        props.patientsDataSorted.map(data=>{\r\n          if (!data.isAdmitted){\r\n            count++;\r\n          }\r\n        })\r\n    \r\n        setCount(count);\r\n      }\r\n\r\n\r\n\r\n      useEffect(()=>{\r\n        countNotAdmitted();\r\n      },[props.patientsDataSorted]);\r\n\r\nreturn (\r\n    <div className=\"App\">\r\n      \r\n\r\n        <h1>Question 1</h1>\r\n\r\n      <br/>\r\n\r\n      <h2>List all patients in order of their patient IDs</h2>\r\n      <br/>\r\n      <table>\r\n                \r\n          <tr>\r\n                <th>PatientID</th>\r\n                <th>LastName</th>\r\n                <th>FirstName</th>\r\n                <th>Admitted Status</th>\r\n          </tr>\r\n      { props.patientsDataSorted.map(data=>{\r\n            return(\r\n              <tr>\r\n                <td>{data.patientID}</td>\r\n                <td>{data.lastName}</td>\r\n                <td>{data.firstName}</td>\r\n                <td>{data.isAdmitted?'Admitted':'Not Admitted'}</td>\r\n              </tr>\r\n            )\r\n        })\r\n      }\r\n    </table>\r\n\r\n      <br/>\r\n\r\n      {/* ---------------------------------------------------------------------- */}\r\n\r\n\r\n      <h2>List the patients who are not admitted yet</h2>\r\n      <br/>\r\n      {count>0?\r\n        <table>      \r\n            <tr>\r\n                    <th>PatientID</th>\r\n                    <th>LastName</th>\r\n                    <th>FirstName</th>\r\n                    <th>Action</th>\r\n            </tr>\r\n        { props.patientsDataSorted.map(data=>{\r\n                return(\r\n                !data.isAdmitted?\r\n                <tr key={data.patientID}>\r\n                    <td>{data.patientID}</td>\r\n                    <td>{data.lastName}</td>\r\n                    <td>{data.firstName}</td>\r\n                    <td style={{cursor: 'default',color: 'blue'}} onClick={()=>props.admittePatient(data.patientID)}>Admitte</td>\r\n                </tr>\r\n                :null\r\n                )\r\n            })\r\n        }\r\n        </table>\r\n\r\n    :<h4 style={{color: 'green'}}>NO DATA LEFT!!!</h4>}\r\n\r\n {/* ---------------------------------------------------------------------- */}\r\n\r\n    <h2>List of the patients who require kidneys</h2>\r\n    <br/>\r\n    <h4>Total Kidney Needed: {props.kidneyNeeded}</h4>\r\n    <br/>\r\n    <table>      \r\n          <tr>\r\n                <th>PatientID</th>\r\n                <th>LastName</th>\r\n                <th>FirstName</th>\r\n          </tr>\r\n      { props.patientsDataSorted.map(data=>{\r\n            return(\r\n   \r\n              data.diseases.find(e=>e=='1-kidney')!=undefined?\r\n              \r\n              // data.diseases=='1-kidney'?\r\n                  <tr>\r\n                    <td>{data.patientID}</td>\r\n                    <td>{data.lastName}</td>\r\n                    <td>{data.firstName}</td>\r\n                  </tr>\r\n                :null\r\n            )\r\n        })\r\n      }\r\n    </table>\r\n\r\n\r\n\r\n    {/* ---------------------------------------------------------------------- */}\r\n\r\n    <br/>\r\n\r\n    <h2>List of the patients who have COVID</h2>\r\n    <br/>\r\n\r\n    <table>      \r\n          <tr>\r\n                <th>LastName</th>\r\n                <th>FirstName</th>\r\n                <th>Total Deseases</th>\r\n          </tr>\r\n      { props.patientsDataSorted.map(data=>{\r\n            return(\r\n\r\n              data.diseases.find(e=>e=='COVID')!=undefined?\r\n                  <tr>\r\n                    <td>{data.lastName}</td>\r\n                    <td>{data.firstName}</td>\r\n                    <td>{data.diseases.length} {data.diseases.length>1?'diseases':'disease'}</td>\r\n                  </tr>\r\n                :null\r\n            )\r\n        })\r\n      }\r\n    </table>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question1;\r\n","\r\nimport '../App.css';\r\nimport React,{useState,useEffect} from 'react';\r\n\r\nconst Question2=(props)=> {\r\n\r\n  const [doctors ,setDoctors ]=useState([\r\n    {\r\n      doctorID: \"6215\",\r\n      firstName: \"Jalaluddin\",\r\n      lastName: \"Mahbub\",\r\n      teamID: \"008\",\r\n      doctorType: \"Consultant\",\r\n      email: \"jabub@hospital.com\",\r\n      active: true,\r\n      doctorRequests: []\r\n  },\r\n  {\r\n      doctorID: \"6216\",\r\n      firstName: \"Amin\",\r\n      lastName: \"Morshed\",\r\n      teamID: \"008\",\r\n      doctorType: \"Assistant Consultant\",\r\n      email: \"amhed@hospital.com\",\r\n      active: true\r\n  },\r\n  {\r\n      doctorID: \"6214\",\r\n      firstName: \"Mahady\",\r\n      lastName: \"Selim\",\r\n      teamID: \"005\",\r\n      doctorType: \"Consultant\",\r\n      email: \"malim@hospital.com\",\r\n      active: true,\r\n      doctorRequests: [\"6213\", ]\r\n  },\r\n  {\r\n      doctorID: \"6213\",\r\n      firstName: \"Jamela\",\r\n      lastName: \"Begum\",\r\n      teamID: \"005\",\r\n      doctorType: \"RMO\",\r\n      email: \"jagum@hospital.com\",\r\n      active: false\r\n  }]);\r\n\r\n  const [teams ,setTeams ]=useState([\r\n    {\r\n      teamName: \"nephrology\",\r\n      teamID: \"008\",\r\n      consultantInCharge: \"6215\",\r\n      teamMates: [\"6216\",]\r\n  },\r\n  {\r\n      teamName: \"cardiology\",\r\n      teamID: \"005\",\r\n      consultantInCharge: \"6214\",\r\n      teamMates: []\r\n  }])\r\n\r\n\r\n\r\n  var doctorsDataSorted = [...doctors];\r\n  doctorsDataSorted.sort((a,b) => a.doctorID - b.doctorID);\r\n  //sorting by doctor ID\r\n\r\n\r\n  const [addMsg,setAddMsg]=useState('');\r\n  const [fastName,setFastName]=useState('');\r\n  const [lastName,setLastname]=useState('');\r\n  const [docReqs,setDocReqs]=useState([]);\r\n\r\n  const uniqueID=()=>{\r\n\r\n    const min = 6217;\r\n    const max = 6300;\r\n    const rand = min + Math.random() * (max - min);\r\n\r\n    return Math.floor(rand);\r\n\r\n  }\r\n\r\n  const addNewDoc=()=>{\r\n\r\n\r\n    if(localStorage.getItem('doctorType')=='Consultant'){\r\n      if(fastName =='' || lastName ==''){\r\n        setAddMsg('Text box is Empty!! Please fill up')\r\n      }\r\n      else{\r\n        const newID= uniqueID();\r\n        const Email = fastName.slice(0, 2)+lastName.slice(0, 3)+'@hospital.com';\r\n\r\n        let newDoc={doctorID: newID,firstName: fastName,lastName: lastName,teamID: \"none\",doctorType: \"RMO\",email: Email,active: false};\r\n        let concat= [newDoc,...doctors]; //new doc added\r\n\r\n        //setDoctors(concat);\r\n        setAddMsg('New doctor Added!');\r\n\r\n        let updateUser=[];\r\n\r\n        doctors.map(d=>{\r\n          {d.doctorID==localStorage.getItem('doctorID') ?\r\n          \r\n          updateUser=d : console.log(d.doctorRequests)}\r\n        })\r\n\r\n\r\n        updateUser.doctorRequests.push(newID);\r\n        \r\n        const filterDoc = concat.filter(d => d.doctorID!=localStorage.getItem('doctorID'));\r\n        //concat is with New doc.\r\n\r\n        setDoctors([updateUser,...filterDoc])\r\n        //console.log(updateUser);\r\n      }\r\n    }\r\n    else{\r\n      setAddMsg('Failed!!...Only Consultant Type Doctor can add new Doctor!');\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const doctorRequestsList=()=>{\r\n    doctors.map(d=>{\r\n\r\n       {d.doctorID==localStorage.getItem('doctorID') ?setDocReqs(d.doctorRequests):console.log(d.doctorRequests)}\r\n    })\r\n\r\n    // d.doctorID==localStorage.getItem('doctorID')?\r\n    // null:null;\r\n\r\n\r\n  }\r\n\r\n\r\n  const addDocToTeam=(id)=>{\r\n\r\n  }\r\n\r\n\r\n  useEffect(()=>{\r\n    localStorage.setItem('doctorID', 6215);\r\n    localStorage.setItem('doctorType', 'Consultant');\r\n    localStorage.setItem('teamID', '008');\r\n    //Assuming that he is logged in\r\n    doctorRequestsList();\r\n  },[])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    \r\n    <h1>Question 2</h1>\r\n    <br/>\r\n\r\n    \r\n\r\n    <h2>List all Doctor sroted by ID</h2>\r\n      <br/>\r\n      <table>\r\n                \r\n          <tr>\r\n                <th>doctorID</th>\r\n                <th>firstName</th>\r\n                <th>lastName</th>\r\n                <th>teamID</th>\r\n                <th>doctorType</th>\r\n                <th>email</th>\r\n                <th>active status</th>\r\n\r\n          </tr>\r\n      { doctorsDataSorted.map(data=>{\r\n            return(\r\n              <tr>\r\n                <td>{data.doctorID}</td>\r\n                <td>{data.firstName}</td>\r\n                <td>{data.lastName}</td>\r\n                <td>{data.teamID}</td>\r\n                <td>{data.doctorType}</td>\r\n                <td>{data.email}</td>\r\n                <td>{data.active?'Active':'Not Active'}</td>\r\n              </tr>\r\n            )\r\n        })\r\n      }\r\n    </table>\r\n\r\n\r\n    {/* ----------------------------------------------- */}\r\n    <h2>Add New Doctor</h2>\r\n    <br/>\r\n    <p>[P.S. I store DoctorID(6215) and Type(Consultant) in the loacal storage. Assuming that he is logged in.]</p>\r\n    <div>\r\n        <table>       \r\n          <tr>\r\n              <th>FirstName</th>\r\n              <th>LastName</th>\r\n              <th>Type</th>\r\n              <th>Action</th>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td><input onChange={e=>setFastName(e.target.value)}/></td>\r\n            <td><input onChange={e=>setLastname(e.target.value)}/></td>\r\n            <td>RMO</td>\r\n            <td onClick={()=>addNewDoc()}>ADD</td>\r\n          </tr>\r\n        </table>\r\n\r\n        <h5>{addMsg}</h5>\r\n    </div>\r\n    <br/>\r\n    {/* ----------------------------------------------- */}\r\n    <h2>Doctor Request of {localStorage.getItem('doctorID')}</h2>\r\n    <br/>\r\n\r\n      <table>\r\n          <tr>\r\n                <th>doctorRequests</th>\r\n                <th>active status</th>\r\n          </tr>\r\n        {docReqs.map(d=>{\r\n              return(\r\n                <tr>\r\n                  <td>{d}</td>\r\n                  <td onClick={()=>addDocToTeam(d)}>ADD to TEAM</td>\r\n                </tr>\r\n                )\r\n        })}\r\n      </table>\r\n\r\n\r\n    {/* ----------------------------------------------- */}\r\n    <h2>Teams Members of {localStorage.getItem('teamID')}</h2>\r\n    <br/>\r\n\r\n      <table>\r\n          <tr>\r\n                <th>DoctorID</th>\r\n                <th>FirstName</th>\r\n                <th>LastName</th>\r\n                <th>DoctorType</th>\r\n                <th>Email</th>\r\n                <th>Active</th>\r\n          </tr>\r\n          {doctorsDataSorted.map(data=>{\r\n           \r\n            return(\r\n            data.teamID==localStorage.getItem('teamID')?\r\n              <tr>\r\n                <td>{data.doctorID}</td>\r\n                <td>{data.firstName}</td>\r\n                <td>{data.lastName}</td>\r\n                <td>{data.doctorType}</td>\r\n                <td>{data.email}</td>\r\n                <td>REMOVE | PROMOTION</td>\r\n              </tr>\r\n              :null\r\n            )\r\n        })\r\n      }\r\n      </table>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question2;\r\n","\r\nimport '../App.css';\r\nimport React,{useState,useEffect} from 'react';\r\n\r\nconst Question3=(props)=> {\r\n\r\n  const [patients,setPatients]=useState([\r\n    { firstName: \"Agent\", lastName: \"Pena\",diseases: [\"COVID\"]},\r\n    { firstName: \"Heisenberg\", lastName: \"Bear\",diseases: [\"Headache\"]},\r\n    { firstName: \"Okarin\", lastName: \"May\",diseases: [\"Broken Wrist\", \"Mad-scientist\"]},\r\n    { firstName: \"Hououin\", lastName: \"Kyoma\",diseases: [\"Delusional disorder\", \"Memory loss\"]}\r\n  ]);\r\n\r\n  const [showMsg,setShowMsg]=useState(false);\r\n\r\n\r\n    const deleteData=(data)=>{\r\n        setShowMsg(true);\r\n        props.addNewPatientFromOtherHospital(data);\r\n        const p = patients.filter(d => d!=data);\r\n\r\n        setPatients(p);\r\n    }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    \r\n    <h1>Question 3</h1>\r\n    <br/>\r\n\r\n    <h2>List the patients from another hospital</h2>\r\n      <br/>\r\n    {patients.length>0?\r\n      <table>      \r\n          <tr>\r\n                <th>LastName</th>\r\n                <th>FirstName</th>\r\n                <th>Action</th>\r\n          </tr>\r\n\r\n\r\n      {patients.map(data=>{\r\n            return(\r\n              <tr>\r\n                <td>{data.lastName}</td>\r\n                <td>{data.firstName}</td>\r\n                <td \r\n                    style={{cursor: 'default',color: 'blue'}}\r\n                    onClick={()=>deleteData(data)}\r\n                    \r\n                    >ADD</td>\r\n              </tr>\r\n            )\r\n        })}\r\n        </table>\r\n\r\n\r\n        :<h4 style={{color: 'green'}}>NO DATA LEFT!!!</h4>}\r\n\r\n\r\n      {/* --------------------------------------------------------------- */}\r\n\r\n    {/* <h2>List all patients in order of their patient IDs</h2>\r\n      <br/>\r\n      <table>\r\n                \r\n          <tr>\r\n                <th>PatientID</th>\r\n                <th>LastName</th>\r\n                <th>FirstName</th>\r\n                <th>Admitted Status</th>\r\n          </tr>\r\n      { props.patientsDataSorted.map(data=>{\r\n            return(\r\n              <tr>\r\n                <td>{data.patientID}</td>\r\n                <td>{data.lastName}</td>\r\n                <td>{data.firstName}</td>\r\n                <td>{data.isAdmitted?'Admitted':'Not Admitted'}</td>\r\n              </tr>\r\n            )\r\n        })\r\n      }\r\n    </table> */}\r\n\r\n\r\n      {showMsg?<div style={{color: 'red'}}>\r\n\r\n        <h4>P.S: Data ADDED! Plaese go to Question-1 tab to check the update.</h4>\r\n        <h4>Donn't reload the page. Othewise it will reset everything!</h4>\r\n      </div>:null}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question3;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React,{useState,useEffect} from 'react';\nimport Qustion1 from './components/Question1';\nimport Qustion2 from './components/Question2';\nimport Qustion3 from './components/Question3';\n\nconst App=()=> {\n  let a=1;\n  const kidneysInStock = 5;\n  const [patients,setPatients]=useState([\n    { firstName: \"Shakira\", lastName: \"Hossain\",patientID: \"007\",diseases: [\"COVID\", \"1-kidney\", \"3/4-dissolved-brain\"],isAdmitted: true},\n    { firstName: \"Uzumaki\", lastName: \"Naruto\",patientID: \"008\",diseases: [\"Obesity\"],isAdmitted: true},\n    { firstName: \"Sheikh\", lastName: \"Selim Ahmed\",patientID: \"006\",diseases: [\"Broken heart\", \"Depression\"],isAdmitted: true},\n    { firstName: \"Rafsan\", lastName: \"Wayne\",patientID: \"009\",diseases: [\"COVID\", \"1-kidney\", \"Impaired vision\"],isAdmitted: false}\n  ]);\n\n  const [pageDataOf, setPageDataOf]=useState('Qustion1');\n\n  const [kidneyNeeded,SetkidneyNeeded]=useState('0');\n\n  var patientsDataSorted = [...patients];\n  patientsDataSorted.sort((a,b) => a.patientID - b.patientID);\n  //sorting by patientID\n\n  \n\n\n  const admittePatient=(id)=>{\n    const isAdmitted= true;\n    let newData = patients.map(el => (el.patientID === id ? {...el, isAdmitted} : el));\n\n    setPatients(newData);\n  }\n\n  const countKendyPatient=()=>{\n    let count = 0;\n    \n    //  data.diseases.find(e=>e=='1-kidney')!=undefined?\n\n    patients.map(data=>{\n      if (data.diseases.find(e=>e=='1-kidney')!=undefined){\n        count++;\n      }\n    })\n\n    SetkidneyNeeded(count);\n  }\n\n  const uniqueID=()=>{\n    const min = 100;\n    const max = 999;\n    const rand = min + Math.random() * (max - min);\n\n    return Math.floor(rand);\n\n  }\n\n  const addNewPatientFromOtherHospitalHandler=(data)=>{\n\n    // let d= [{patientID:50,isAdmitted: true}]\n    // let newPa=[...d,data];\n\n\n   setPatients([{firstName: data.firstName, lastName:data.lastName,patientID: uniqueID(),diseases: data.diseases,isAdmitted: true},...patients]);\n\n\n    console.log(patients);\n  }\n\n\n  useEffect(()=>{\n    countKendyPatient();\n  },[]);\n\n  useEffect(()=>{\n    countKendyPatient();\n  },[patients]);\n\n\n  let pageData='';\n\n  if(pageDataOf=='Qustion1'){\n    pageData= <Qustion1 patientsDataSorted={patientsDataSorted} kidneyNeeded={kidneyNeeded} admittePatient={admittePatient}/>;\n  }\n  else if(pageDataOf=='Qustion2'){\n    pageData=<Qustion2 patientsDataSorted={patientsDataSorted} addNewPatientFromOtherHospital={addNewPatientFromOtherHospitalHandler}/>;\n  }\nelse{\n  pageData=<Qustion3 patientsDataSorted={patientsDataSorted} addNewPatientFromOtherHospital={addNewPatientFromOtherHospitalHandler}/>;\n}\n\n\n  return (\n    <div className=\"App\">\n      \n      <button onClick={()=>setPageDataOf('Qustion1')}>Qustion1</button>\n      <button onClick={()=>setPageDataOf('Qustion2')}>Qustion2</button>\n      <button onClick={()=>setPageDataOf('Qustion3')}>Qustion3</button>\n\n      {pageData}\n\n     \n\n      \n\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}