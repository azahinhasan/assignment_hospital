{"version":3,"sources":["logo.svg","components/Question1.js","components/Question2.js","components/Question3.js","App.js","reportWebVitals.js","index.js"],"names":["Question1","props","useState","count","setCount","useEffect","patientsDataSorted","map","data","isAdmitted","countNotAdmitted","className","patientID","lastName","firstName","style","cursor","color","onClick","admittePatient","kidneyNeeded","undefined","diseases","find","e","length","Question2","doctors","setDoctors","doctorsDataSorted","teams","setTeams","sort","a","b","doctorID","addMsg","setAddMsg","fastName","setFastName","setLastname","docReqs","setDocReqs","addNewDoc","localStorage","getItem","newID","rand","Math","random","floor","uniqueID","Email","slice","concat","teamID","doctorType","email","active","updateUser","d","console","log","doctorRequests","push","filterDoc","filter","removeFromDocReq","id","updatedData","doctorRequestsRemove","item","newData","el","setItem","placeholder","onChange","target","value","addDocToTeam","Question3","patients","setShowMsg","addNewPatientFromOtherHospital","p","setPatients","deleteData","showMsg","App","patientsFromOhterHos","setPatientsFromOhterHos","teamName","consultantInCharge","teamMates","pageDataOf","setPageDataOf","SetkidneyNeeded","showMsgQus3","setShowMsgQus3","countKendyPatient","pageData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c644e71.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\nimport '../App.css';\r\nimport React,{useState,useEffect} from 'react';\r\n\r\nconst Question1=(props)=> {\r\n\r\n\r\n    const [count, setCount]=useState(0);\r\n\r\n    const countNotAdmitted=()=>{\r\n        let count = 0;\r\n        \r\n        //  data.diseases.find(e=>e=='1-kidney')!=undefined?\r\n    \r\n        props.patientsDataSorted.map(data=>{\r\n          if (!data.isAdmitted){\r\n            count++;\r\n          }\r\n        })\r\n    \r\n        setCount(count);\r\n      }\r\n\r\n\r\n\r\n      useEffect(()=>{\r\n        countNotAdmitted();\r\n      },[props.patientsDataSorted]);\r\n\r\nreturn (\r\n    <div className=\"App\">\r\n      \r\n\r\n        <h1>Question 1</h1>\r\n\r\n      <br/>\r\n\r\n      <h2>List all patients in order of their patient IDs</h2>\r\n      <br/>\r\n      <table>\r\n                \r\n          <tr>\r\n                <th>PatientID</th>\r\n                <th>LastName</th>\r\n                <th>FirstName</th>\r\n                <th>Admitted Status</th>\r\n          </tr>\r\n      { props.patientsDataSorted.map(data=>{\r\n            return(\r\n              <tr>\r\n                <td>{data.patientID}</td>\r\n                <td>{data.lastName}</td>\r\n                <td>{data.firstName}</td>\r\n                <td>{data.isAdmitted?'Admitted':'Not Admitted'}</td>\r\n              </tr>\r\n            )\r\n        })\r\n      }\r\n    </table>\r\n\r\n      <br/>\r\n\r\n      {/* ---------------------------------------------------------------------- */}\r\n\r\n\r\n      <h2>List the patients who are not admitted yet</h2>\r\n      <br/>\r\n      {count>0?\r\n        <table>      \r\n            <tr>\r\n                    <th>PatientID</th>\r\n                    <th>LastName</th>\r\n                    <th>FirstName</th>\r\n                    <th>Action</th>\r\n            </tr>\r\n        { props.patientsDataSorted.map(data=>{\r\n                return(\r\n                !data.isAdmitted?\r\n                <tr key={data.patientID}>\r\n                    <td>{data.patientID}</td>\r\n                    <td>{data.lastName}</td>\r\n                    <td>{data.firstName}</td>\r\n                    <td style={{cursor: 'default',color: 'blue'}} onClick={()=>props.admittePatient(data.patientID)}>Admitte</td>\r\n                </tr>\r\n                :null\r\n                )\r\n            })\r\n        }\r\n        </table>\r\n\r\n    :<h4 style={{color: 'green'}}>NO DATA LEFT!!!</h4>}\r\n\r\n {/* ---------------------------------------------------------------------- */}\r\n\r\n    <h2>List of the patients who require kidneys</h2>\r\n    <br/>\r\n    <h4>Total Kidney Needed: {props.kidneyNeeded}</h4>\r\n    <br/>\r\n    <table>      \r\n          <tr>\r\n                <th>PatientID</th>\r\n                <th>LastName</th>\r\n                <th>FirstName</th>\r\n          </tr>\r\n      { props.patientsDataSorted.map(data=>{\r\n            return(\r\n   \r\n              data.diseases.find(e=>e=='1-kidney')!=undefined?\r\n              \r\n              // data.diseases=='1-kidney'?\r\n                  <tr>\r\n                    <td>{data.patientID}</td>\r\n                    <td>{data.lastName}</td>\r\n                    <td>{data.firstName}</td>\r\n                  </tr>\r\n                :null\r\n            )\r\n        })\r\n      }\r\n    </table>\r\n\r\n\r\n\r\n    {/* ---------------------------------------------------------------------- */}\r\n\r\n    <br/>\r\n\r\n    <h2>List of the patients who have COVID</h2>\r\n    <br/>\r\n\r\n    <table>      \r\n          <tr>\r\n                <th>LastName</th>\r\n                <th>FirstName</th>\r\n                <th>Total Deseases</th>\r\n          </tr>\r\n      { props.patientsDataSorted.map(data=>{\r\n            return(\r\n\r\n              data.diseases.find(e=>e=='COVID')!=undefined?\r\n                  <tr>\r\n                    <td>{data.lastName}</td>\r\n                    <td>{data.firstName}</td>\r\n                    <td>{data.diseases.length} {data.diseases.length>1?'diseases':'disease'}</td>\r\n                  </tr>\r\n                :null\r\n            )\r\n        })\r\n      }\r\n    </table>\r\n    <p style={{color: 'blue'}}>[P.S. Diseases number less then 2 will show Disease]</p>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question1;\r\n","\r\nimport '../App.css';\r\nimport React,{useState,useEffect} from 'react';\r\n\r\nconst Question2=({doctors,setDoctors,teams,setTeams})=> {\r\n\r\n  // const [doctors ,setDoctors ]=useState([\r\n  //   {doctorID: \"6215\",firstName: \"Jalaluddin\",lastName: \"Mahbub\",teamID: \"008\",doctorType: \"Consultant\",email: \"jabub@hospital.com\",active: true,doctorRequests: []},\r\n  //   {doctorID: \"6216\",firstName: \"Amin\",lastName: \"Morshed\",teamID: \"008\",doctorType: \"Assistant Consultant\",email: \"amhed@hospital.com\",active: true},\r\n  //   {doctorID: \"6214\",firstName: \"Mahady\",lastName: \"Selim\",teamID: \"005\",doctorType: \"Consultant\",email: \"malim@hospital.com\",active: true,doctorRequests: [\"6213\",]},\r\n  //   {doctorID: \"6213\",firstName: \"Jamela\",lastName: \"Begum\",teamID: \"005\",doctorType: \"RMO\",email: \"jagum@hospital.com\",active: false}]);\r\n\r\n  // const [teams ,setTeams ]=useState([\r\n  //   {teamName: \"nephrology\",teamID: \"008\",consultantInCharge: \"6215\",teamMates: [\"6216\",]},\r\n  //   {teamName: \"cardiology\",teamID: \"005\",consultantInCharge: \"6214\",teamMates: []}\r\n  // ]);\r\n\r\n\r\n\r\n  var doctorsDataSorted = [...doctors];\r\n  doctorsDataSorted.sort((a,b) => a.doctorID - b.doctorID);\r\n  //sorting by doctor ID\r\n\r\n\r\n  const [addMsg,setAddMsg]=useState('');\r\n  const [fastName,setFastName]=useState('');\r\n  const [lastName,setLastname]=useState('');\r\n  const [docReqs,setDocReqs]=useState([]);\r\n\r\n  const uniqueID=()=>{\r\n\r\n    const min = 6217;\r\n    const max = 6300;\r\n    const rand = min + Math.random() * (max - min);\r\n\r\n    return Math.floor(rand);\r\n\r\n  }\r\n\r\n  const addNewDoc=()=>{\r\n\r\n\r\n    if(localStorage.getItem('doctorType')=='Consultant'){\r\n      if(fastName =='' || lastName ==''){\r\n        setAddMsg('Text box is Empty!! Please fill up')\r\n      }\r\n      else{\r\n        const newID= uniqueID();\r\n        const Email = fastName.slice(0, 2)+lastName.slice(0, 3)+'@hospital.com';\r\n\r\n        let newDoc={doctorID: newID,firstName: fastName,lastName: lastName,teamID: \"none\",doctorType: \"RMO\",email: Email,active: false};\r\n        let concat= [newDoc,...doctors]; //new doc added\r\n\r\n        //setDoctors(concat);\r\n        setAddMsg('New doctor Added!');\r\n\r\n        let updateUser=[];\r\n\r\n        doctors.map(d=>{\r\n          {d.doctorID==localStorage.getItem('doctorID') ?\r\n          \r\n          updateUser=d : console.log(d.doctorRequests)}\r\n        })\r\n\r\n\r\n        updateUser.doctorRequests.push(newID);\r\n        \r\n        const filterDoc = concat.filter(d => d.doctorID!=localStorage.getItem('doctorID'));\r\n        //concat is-- with New doc.\r\n\r\n        setDoctors([updateUser,...filterDoc])\r\n        //console.log(updateUser);\r\n      }\r\n    }\r\n    else{\r\n      setAddMsg('Failed!!...Only Consultant Type Doctor can add new Doctor!');\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const doctorRequestsList=()=>{\r\n    doctors.map(d=>{\r\n\r\n       {d.doctorID==localStorage.getItem('doctorID') ?setDocReqs(d.doctorRequests):console.log(['doctorRequestsList'])}\r\n    })\r\n\r\n    // d.doctorID==localStorage.getItem('doctorID')?\r\n    // null:null;\r\n\r\n\r\n  }\r\n\r\n\r\n  const addDocToTeam=(id)=>{\r\n\r\n    const teamID = localStorage.getItem('teamID');\r\n    let newData=doctors.map(el => (el.doctorID === id ? {...el, teamID,active:true} : el))\r\n    setDoctors(newData);\r\n    console.log('addDocToTeam');\r\n\r\n    removeFromDocReq(id,newData);\r\n\r\n\r\n  }\r\n\r\n  const removeFromDocReq=(id,updatedData)=>{\r\n\r\n    let updateUser=[];\r\n    updatedData.map(d=>{\r\n      {d.doctorID==localStorage.getItem('doctorID') ?\r\n      \r\n      updateUser=d : console.log(d.doctorRequests)}\r\n    })\r\n\r\n\r\n    \r\n    // updateUser.doctorRequests.filter(item => item != 6282);\r\n\r\n    // let a = [...updateUser.doctorRequests, ...updateUser.doctorRequests.filter(item => item != 6282)]\r\n    \r\n    // const filterDoc = doctors.filter(d => d.doctorID!=localStorage.getItem('doctorID'));\r\n\r\n    // setDoctors([updateUser,...filterDoc]);\r\n\r\n    let doctorRequestsRemove = updateUser.doctorRequests.filter(item => item != id);\r\n\r\n    let newData=updatedData.map(el => (el.doctorID ===  localStorage.getItem('doctorID') ? {...el, doctorRequests:doctorRequestsRemove} : el));\r\n    \r\n    setDoctors(newData);\r\n    setDocReqs(doctorRequestsRemove);\r\n\r\n    console.log(doctorRequestsRemove);\r\n\r\n  }\r\n\r\n\r\n  const promotionDoc=(id)=>{\r\n    let doctorType='Assistant Consultant';\r\n    \r\n    setDoctors(doctors.map(el => (el.doctorID == id ? {...el, doctorType} : el)));\r\n\r\n    console.log(\"promotionDoc\");\r\n  }\r\n\r\n  const removeDocFromTeam=(id)=>{\r\n\r\n    setDoctors(doctors.map(el => (el.doctorID == id ? {...el, teamID:'none',active:false} : el)));\r\n\r\n    console.log(\"promotionDoc\");\r\n  }\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    localStorage.setItem('doctorID', 6215);\r\n    localStorage.setItem('doctorType', 'Consultant');\r\n    localStorage.setItem('teamID', '008');\r\n    //Assuming that he is logged in\r\n    doctorRequestsList();\r\n  },[])\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    \r\n    <h1>Question 2</h1>\r\n    <br/>\r\n\r\n    \r\n      <h5>[-- I store DoctorID(6215),Type(Consultant) and TeamNumber in the loacal storage]</h5>\r\n      <h5>[-- Because Assuming that he is logged in. After login those data store in LoacalStorage]</h5>\r\n      <br/>\r\n      <h2>List all Doctor sroted by ID</h2>\r\n      <br/> \r\n      <table>\r\n                \r\n          <tr>\r\n                <th>DoctorID</th>\r\n                <th>FirstName</th>\r\n                <th>LastName</th>\r\n                <th>TeamID</th>\r\n                <th>DoctorType</th>\r\n                <th>Email</th>\r\n                <th>Active Status</th>\r\n\r\n          </tr>\r\n      { doctorsDataSorted.map(data=>{\r\n            return(\r\n              <tr>\r\n                <td>{data.doctorID}</td>\r\n                <td>{data.firstName}</td>\r\n                <td>{data.lastName}</td>\r\n                <td>{data.teamID}</td>\r\n                <td>{data.doctorType}</td>\r\n                <td>{data.email}</td>\r\n                <td>{data.active?'Active':'Not Active'}</td>\r\n              </tr>\r\n            )\r\n        })\r\n      }\r\n    </table>\r\n\r\n\r\n    {/* ----------------------------------------------- */}\r\n    <h2>Add New Doctor</h2>\r\n    <br/>\r\n\r\n    <div>\r\n        <table>       \r\n          {/* <tr>\r\n              <th>FirstName</th>\r\n              <th>LastName</th>\r\n              <th>Type</th>\r\n              <th>Action</th>\r\n          </tr> */}\r\n\r\n          <tr>\r\n            <td><input placeholder=\"FirstName\" onChange={e=>setFastName(e.target.value)}/></td>\r\n            <td><input placeholder=\"LastName\" onChange={e=>setLastname(e.target.value)}/></td>\r\n            {/* <td>Type: RMO</td> */}\r\n            <td onClick={()=>addNewDoc()}  style={{cursor: 'default',color: 'blue'}}>ADD</td>\r\n          </tr>\r\n        </table>\r\n\r\n        <h5  style={{color: 'blue'}}>{addMsg}</h5>\r\n    </div>\r\n    <br/>\r\n    {/* ----------------------------------------------- */}\r\n    <h2>Doctor Request of {localStorage.getItem('doctorID')}</h2>\r\n    <br/>\r\n\r\n      <table>\r\n          <tr>\r\n                <th>Doctor Requests</th>\r\n                <th>Active Status</th>\r\n          </tr>\r\n        {docReqs.map(d=>{\r\n              return(\r\n                <tr>\r\n                  <td>{d}</td>\r\n                  <td onClick={()=>addDocToTeam(d)}>ADD to TEAM</td>\r\n                </tr>\r\n                )\r\n        })}\r\n      </table>\r\n\r\n\r\n    {/* ----------------------------------------------- */}\r\n    <h2>Teams Members of {localStorage.getItem('teamID')}</h2>\r\n    <br/>\r\n\r\n      <table>\r\n          <tr>\r\n                <th>DoctorID</th>\r\n                <th>FirstName</th>\r\n                <th>LastName</th>\r\n                <th>DoctorType</th>\r\n                <th>Email</th>\r\n                <th>Active</th>\r\n          </tr>\r\n          {doctorsDataSorted.map(data=>{\r\n           \r\n            return(\r\n            data.teamID==localStorage.getItem('teamID')&& data.doctorID!=localStorage.getItem('doctorID')?\r\n              <tr>\r\n                <td>{data.doctorID}</td>\r\n                <td>{data.firstName}</td>\r\n                <td>{data.lastName}</td>\r\n                <td>{data.doctorType}</td>\r\n                <td>{data.email}</td>\r\n                <td>\r\n                  <span onClick={()=>removeDocFromTeam(data.doctorID)} style={{cursor: 'default',color: 'red'}}>REMOVE </span> \r\n                  | \r\n                  <span  onClick={()=>promotionDoc(data.doctorID)} style={{cursor: 'default',color: 'green'}}> PROMOTION</span></td>\r\n              </tr>\r\n              :null\r\n            )\r\n        })\r\n      }\r\n      </table>\r\n\r\n      <p style={{color: 'blue'}}>[P.S. Promotion will chnage Doctor type only to Assistant Consultant]</p>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question2;\r\n","\r\nimport '../App.css';\r\nimport React,{useState,useEffect} from 'react';\r\n\r\nconst Question3=(props)=> {\r\n\r\n  // const [patients,setPatients]=useState([\r\n  //   { firstName: \"Agent\", lastName: \"Pena\",diseases: [\"COVID\"]},\r\n  //   { firstName: \"Heisenberg\", lastName: \"Bear\",diseases: [\"Headache\"]},\r\n  //   { firstName: \"Okarin\", lastName: \"May\",diseases: [\"Broken Wrist\", \"Mad-scientist\"]},\r\n  //   { firstName: \"Hououin\", lastName: \"Kyoma\",diseases: [\"Delusional disorder\", \"Memory loss\"]}\r\n  // ]);\r\n\r\n  \r\n\r\n\r\n    const deleteData=(data)=>{\r\n        props.setShowMsg(true);\r\n        props.addNewPatientFromOtherHospital(data);\r\n        const p = props.patients.filter(d => d!=data);\r\n\r\n        props.setPatients(p);\r\n    }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    \r\n    <h1>Question 3</h1>\r\n    <br/>\r\n\r\n    <h2>List the patients from another hospital</h2>\r\n      <br/>\r\n    {props.patients.length>0?\r\n      <table>      \r\n          <tr>\r\n                <th>LastName</th>\r\n                <th>FirstName</th>\r\n                <th>Action</th>\r\n          </tr>\r\n\r\n\r\n      {props.patients.map(data=>{\r\n            return(\r\n              <tr>\r\n                <td>{data.lastName}</td>\r\n                <td>{data.firstName}</td>\r\n                <td \r\n                    style={{cursor: 'default',color: 'blue'}}\r\n                    onClick={()=>deleteData(data)}\r\n                    \r\n                    >ADD</td>\r\n              </tr>\r\n            )\r\n        })}\r\n        </table>\r\n\r\n\r\n        :<h4 style={{color: 'green'}}>NO DATA LEFT!!!</h4>}\r\n\r\n\r\n\r\n\r\n      {props.showMsg?<div style={{color: 'red'}}>\r\n\r\n        <h4>P.S: Data ADDED! Plaese go to Question-1 tab to check the update.</h4>\r\n        <h4>Donn't reload the page. Othewise it will reset everything!</h4>\r\n      </div>:null}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question3;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React,{useState,useEffect} from 'react';\nimport Qustion1 from './components/Question1';\nimport Qustion2 from './components/Question2';\nimport Qustion3 from './components/Question3';\n\nconst App=()=> {\n  let a=1;\n  const kidneysInStock = 5;\n  const [patients,setPatients]=useState([\n    { firstName: \"Shakira\", lastName: \"Hossain\",patientID: \"007\",diseases: [\"COVID\", \"1-kidney\", \"3/4-dissolved-brain\"],isAdmitted: true},\n    { firstName: \"Uzumaki\", lastName: \"Naruto\",patientID: \"008\",diseases: [\"Obesity\"],isAdmitted: true},\n    { firstName: \"Sheikh\", lastName: \"Selim Ahmed\",patientID: \"006\",diseases: [\"Broken heart\", \"Depression\"],isAdmitted: true},\n    { firstName: \"Rafsan\", lastName: \"Wayne\",patientID: \"009\",diseases: [\"COVID\", \"1-kidney\", \"Impaired vision\"],isAdmitted: false}\n  ]);\n\n  const [patientsFromOhterHos,setPatientsFromOhterHos]=useState([\n    { firstName: \"Agent\", lastName: \"Pena\",diseases: [\"COVID\"]},\n    { firstName: \"Heisenberg\", lastName: \"Bear\",diseases: [\"Headache\"]},\n    { firstName: \"Okarin\", lastName: \"May\",diseases: [\"Broken Wrist\", \"Mad-scientist\"]},\n    { firstName: \"Hououin\", lastName: \"Kyoma\",diseases: [\"Delusional disorder\", \"Memory loss\"]}\n  ]);\n\n  const [doctors ,setDoctors ]=useState([\n    {doctorID: \"6215\",firstName: \"Jalaluddin\",lastName: \"Mahbub\",teamID: \"008\",doctorType: \"Consultant\",email: \"jabub@hospital.com\",active: true,doctorRequests: []},\n    {doctorID: \"6216\",firstName: \"Amin\",lastName: \"Morshed\",teamID: \"008\",doctorType: \"Assistant Consultant\",email: \"amhed@hospital.com\",active: true},\n    {doctorID: \"6214\",firstName: \"Mahady\",lastName: \"Selim\",teamID: \"005\",doctorType: \"Consultant\",email: \"malim@hospital.com\",active: true,doctorRequests: [\"6213\",]},\n    {doctorID: \"6213\",firstName: \"Jamela\",lastName: \"Begum\",teamID: \"005\",doctorType: \"RMO\",email: \"jagum@hospital.com\",active: false}]);\n\n  const [teams ,setTeams ]=useState([\n    {teamName: \"nephrology\",teamID: \"008\",consultantInCharge: \"6215\",teamMates: [\"6216\",]},\n    {teamName: \"cardiology\",teamID: \"005\",consultantInCharge: \"6214\",teamMates: []}\n  ]);\n\n\n  const [pageDataOf, setPageDataOf]=useState('Qustion1');\n  const [kidneyNeeded,SetkidneyNeeded]=useState('0');\n  const [showMsgQus3,setShowMsgQus3]=useState(false);\n\n\n\n\n  var patientsDataSorted = [...patients];\n  patientsDataSorted.sort((a,b) => a.patientID - b.patientID);\n  //sorting by patientID\n\n  \n\n\n  const admittePatient=(id)=>{\n    const isAdmitted= true;\n    let newData = patients.map(el => (el.patientID === id ? {...el, isAdmitted} : el));\n\n    setPatients(newData);\n  }\n\n  const countKendyPatient=()=>{\n    let count = 0;\n    \n    //  data.diseases.find(e=>e=='1-kidney')!=undefined?\n\n    patients.map(data=>{\n      if (data.diseases.find(e=>e=='1-kidney')!=undefined){\n        count++;\n      }\n    })\n\n    SetkidneyNeeded(count);\n  }\n\n  const uniqueID=()=>{\n    const min = 100;\n    const max = 999;\n    const rand = min + Math.random() * (max - min);\n\n    return Math.floor(rand);\n\n  }\n\n  const addNewPatientFromOtherHospitalHandler=(data)=>{\n\n    // let d= [{patientID:50,isAdmitted: true}]\n    // let newPa=[...d,data];\n\n\n   setPatients([{firstName: data.firstName, lastName:data.lastName,patientID: uniqueID(),diseases: data.diseases,isAdmitted: true},...patients]);\n\n\n    console.log(patients);\n  }\n\n\n  useEffect(()=>{\n    countKendyPatient();\n  },[]);\n\n  useEffect(()=>{\n    countKendyPatient();\n  },[patients]);\n\n\n  let pageData='';\n\n  if(pageDataOf=='Qustion1'){\n    pageData= <Qustion1 patientsDataSorted={patientsDataSorted} kidneyNeeded={kidneyNeeded} admittePatient={admittePatient}/>;\n  }\n  else if(pageDataOf=='Qustion2'){\n    pageData=<Qustion2 doctors={doctors} setDoctors={setDoctors} \n              teams={teams} setTeams={setTeams}/>;\n  }\nelse{\n  pageData=<Qustion3 \n            patients={patientsFromOhterHos} \n            setPatients={setPatientsFromOhterHos} \n            patientsDataSorted={patientsDataSorted} \n            addNewPatientFromOtherHospital={addNewPatientFromOtherHospitalHandler}\n            showMsg={showMsgQus3} setShowMsg={setShowMsgQus3}\n            />;\n}\n\n\n  return (\n    <div className=\"App\">\n      \n      <button onClick={()=>setPageDataOf('Qustion1')}>Qustion1</button>\n      <button onClick={()=>setPageDataOf('Qustion3')}>Qustion3</button>\n      <button onClick={()=>setPageDataOf('Qustion2')}>Qustion2</button>\n\n      {pageData}\n\n\n\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}